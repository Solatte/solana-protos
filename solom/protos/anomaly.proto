syntax = "proto3";

option go_package = "/solom/pb";

package solom;

service Anomaly {
    rpc Subscribe(stream SubscribeRequest) returns (stream SubscribeUpdate) {}
    rpc GetPriceAllWindow(AmmId) returns (PriceAllWindow) {}
    rpc GetVolumeAllWindow(AmmId) returns (VolumeAllWindow) {}
}

message SubscribeRequest {
    SubscribeRequestFilterSolBalance sol_balance = 1;
    SubscribeRequestFilterPumpFun pumpfun = 2;
    SubscribeRequestFilterTransactionFilter transaction = 3;
    optional string source = 4;
}

message SubscribeRequestFilterSolBalance {
    optional int64 min = 1;
    optional int64 max = 2;
}

message SubscribeRequestFilterPumpFun {
    optional bool is_pumpfun_token = 1;
}

message SubscribeRequestFilterTransactionFilter {
    repeated string mint = 1;
    repeated string signer = 2;
    oneof condition {
        TransactionAbove above = 3;
        TransactionBelow below = 4;
        TransactionBetween between = 5;
    }
}
message SubscribeRequestFilterOHLC {
    string amm_id = 1;
    int64 time_interval = 2;
}

message TransactionAbove {
    float threshold = 1;
}

message TransactionBelow {
    float threshold = 1;
}

message TransactionBetween {
    float min = 1;
    float max = 2;
}

message SubscribeUpdate {
    oneof update_oneof {
        SubscribeUpdateTransaction transaction = 2;
        SubscribeUpdateOHLC ohlc = 3;
    }
}

message SubscribeUpdateTransaction {
    string amm_id = 1;
    string mint = 2;
    string source = 3;
}

message SubscribeUpdateOHLC {
    string amm_id = 1;
    int64 time_interval = 2;
    map<int64, OHLC> prices = 3;
}

message OHLC {
    double open = 1;
    double high = 2;
    double low = 3;
    double close = 4;
}

message AmmId {
    string amm_id = 1;
}

message PriceAllWindow {
    map<string, double> price = 1;
}

message VolumeAction {
    map<string, int64> volume_action = 1;
}

message VolumeAllWindow {
    map<string, VolumeAction> volume_window = 1;
}