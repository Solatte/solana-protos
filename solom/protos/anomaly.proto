syntax = "proto3";

option go_package = "/solom/pb";

package solom;

service Anomaly {
    rpc Subscribe(stream SubscribeRequest) returns (stream SubscribeUpdate) {}
    rpc GetPriceAllWindow(AmmId) returns (PriceAllWindow) {}
    rpc GetVolumeAllWindow(AmmId) returns (VolumeAllWindow) {}
    rpc GetOHLCPriceAllWindow(GetOHLCPriceAllWindowArgs) returns (OHLCPriceAllWindow) {}
}

message SubscribeRequest {
    SubscribeRequestFilterSolBalance sol_balance = 1;
    SubscribeRequestFilterPumpFun pumpfun = 2;
    SubscribeRequestFilterTransactionFilter transaction = 3;
    optional string source = 4;
}

message SubscribeRequestFilterSolBalance {
    optional uint64 min = 1;
    optional uint64 max = 2;
}

message SubscribeRequestFilterPumpFun {
    optional bool is_pumpfun = 1;
}

message SubscribeRequestFilterTransactionFilter {
    repeated string mint = 1;
    repeated string signer = 2;
    optional uint64 min = 3;
    optional uint64 max = 4;
}

message SubscribeRequestFilterOHLC {
    string amm_id = 1;
    int64 time_interval = 2;
}

message SubscribeUpdate {
    string dex = 1;
    string amm_id = 2;
    string mint = 3;
    string signature = 4;
}

message AmmId {
    string amm_id = 1;
}

message PriceAllWindow {
    map<string, double> price = 1;
}

message ActionMap {
    map<string, int64> volume = 1;
}

message VolumeAllWindow {
    map<string, ActionMap> volume = 1;
}

message GetOHLCPriceAllWindowArgs {
    string amm_id = 1;
    int64 time_interval = 2;
}

message OHLCPriceAllWindow {
    map<string, OHLC> price = 1;
}

message OHLC {
    double open = 1;
    double high = 2;
    double low = 3;
    double close = 4;
}